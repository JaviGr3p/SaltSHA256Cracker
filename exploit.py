import hashlib
import binascii
from hashlib import pbkdf2_hmac
import sys
import signal
import time

def saliendo(signal_received, frame):
    print("\n[⚠️] Saliendo... Interrupción detectada. 🛑")
    sys.exit(0)

signal.signal(signal.SIGINT, saliendo)

print("=" * 50)
print("🔓 Salt SHA256 Cracker - J4Gr3p")
print("🚀 Descifrando hash con diccionario...")
print("=" * 50)

# Definición de parámetros
salt = binascii.unhexlify("2d149e5fbd1b20cf31db3e3c6a28fc9b")
hash_target = binascii.unhexlify("cba20ccf927d3ad0567b68161732d3fbca098ce886bbc923b4062a3960d459c08d2dfc063b2406ac9207c980c47c5d017136")
iterations = 50000
wordlist_path = "/usr/share/wordlists/rockyou.txt"

try:
    # Contar el número total de líneas en el diccionario para la barra de progreso
    with open(wordlist_path, "r", encoding="latin-1") as f:
        total_passwords = sum(1 for _ in f)

    print(f"📂 Diccionario cargado: {total_passwords} claves a analizar.\n")

    with open(wordlist_path, "r", encoding="latin-1") as f:
        for i, password in enumerate(f, 1):
            password = password.strip()
            hash_candidate = pbkdf2_hmac('sha256', password.encode(), salt, iterations, 50)

            # Barra de progreso manual
            progress = int((i / total_passwords) * 50)  # Escalamos a 50 caracteres
            sys.stdout.write(f"\r🔍 Progreso: [{'#' * progress}{'-' * (50 - progress)}] {i}/{total_passwords}")
            sys.stdout.flush()

            if hash_candidate == hash_target:
                print(f"\n\n[✅] ¡Contraseña encontrada! 🚀")
                print(f"[+] Password: {password}")
                sys.exit(0)

    print("\n[❌] No se encontró la contraseña en la lista.")
except FileNotFoundError:
    print(f"[❌] No se encontró el archivo: {wordlist_path}")
except Exception as e:
    print(f"[⚠️] Error inesperado: {e}")
